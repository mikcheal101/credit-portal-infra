"use strict";var f=Object.create;var l=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var E=(s,e)=>{for(var a in e)l(s,a,{get:e[a],enumerable:!0})},u=(s,e,a,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of g(e))!A.call(s,r)&&r!==a&&l(s,r,{get:()=>e[r],enumerable:!(o=b(e,r))||o.enumerable});return s};var x=(s,e,a)=>(a=s!=null?f(P(s)):{},u(e||!s||!s.__esModule?l(a,"default",{value:s,enumerable:!0}):a,s)),D=s=>u(l({},"__esModule",{value:!0}),s);var c=(s,e,a)=>new Promise((o,r)=>{var p=t=>{try{n(a.next(t))}catch(d){r(d)}},i=t=>{try{n(a.throw(t))}catch(d){r(d)}},n=t=>t.done?o(t.value):Promise.resolve(t.value).then(p,i);n((a=a.apply(s,e)).next())});var I={};E(I,{lambdaHandler:()=>C});module.exports=D(I);var v=require("@aws-sdk/client-dynamodb"),m=require("@aws-sdk/lib-dynamodb"),w=x(require("crypto"));var y=class{constructor(e){this.body={};this.params={};this.body=e,this.valididity=!1}validate(){if(!this.body)throw this.valididity=!1,Error("Username Required!");if(this.params=JSON.parse(this.body),!this.params.username)throw this.valididity=!1,Error("Username Required!");if(!this.params.password)throw this.valididity=!1,Error("Password Required!");if(this.params.username.length<10)throw this.valididity=!1,Error("Username length must be min 10 chars long!");if(this.params.password.length<10)throw this.valididity=!1,Error("Password length must be min 10 chars long!");if(!this.params.username.includes("@"))throw this.valididity=!1,Error("Username must be an email address!");this.valididity=!0}getParameters(){return this.params}isValid(){return this.valididity}},C=s=>c(void 0,null,function*(){let e="",a=200,o={"Content-Type":"application/json"},r=new y(s.body);try{r.validate()}catch(i){a=500,e=i.message}if(r.isValid()){let i=r.getParameters(),n=w.createHash("md5").update(i.password).digest("base64"),t=!1,d=m.DynamoDBDocumentClient.from(new v.DynamoDBClient({region:"us-east-2"}));try{t=(yield d.send(new m.ScanCommand({TableName:process.env.TABLE_NAME,ProjectionExpression:"auth_id, username",FilterExpression:"username = :username AND passwordHash = :password AND isActive = :isActive",ExpressionAttributeValues:{":username":i.username,":password":n,":isActive":!0}}))).Items.length>0}catch(h){t=!1,a=400,e=h.message,console.log(h.message)}t?(a=200,e=`Welcome ${i.username}`):(a=200,e="User account does not exist")}return{statusCode:a,body:e,headers:o}});0&&(module.exports={lambdaHandler});
//# sourceMappingURL=app.js.map
