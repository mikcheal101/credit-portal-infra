{
  "version": 3,
  "sources": ["../../../../../../../../../../private/var/folders/wp/3087_ybx3m11q540r3cpqq940000gn/T/tmpkuzncsz7/app.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\"\nimport { DynamoDBDocumentClient, ScanCommand, PutCommand } from \"@aws-sdk/lib-dynamodb\"\nimport * as crypto from \"crypto\";\n\n\nclass Validator {\n\n    private body: any = {};\n    private valididity: boolean;\n    private params: any = {};\n\n    constructor(_body: any) {\n        this.body = _body;\n        this.valididity = false;\n    }\n\n    validate(): void {\n\n        if (!this.body) {\n\n            this.valididity = false;\n            throw Error('Username Required!')\n        }\n\n        this.params = JSON.parse(this.body);\n\n        if (!this.params.username) {\n\n            this.valididity = false;\n            throw Error('Username Required!')\n        }\n\n        if (!this.params.password) {\n            this.valididity = false;\n            throw Error('Password Required!')\n        }\n\n        if (this.params.username.length < 10) {\n            this.valididity = false;\n            throw Error('Username length must be min 10 chars long!')\n        }\n\n        if (this.params.password.length < 10) {\n            this.valididity = false;\n            throw Error('Password length must be min 10 chars long!')\n        }\n\n        if (!this.params.username.includes('@')) {\n            this.valididity = false;\n            throw Error('Username must be an email address!')\n        }\n\n        this.valididity = true;\n    }\n\n    getParameters(): any {\n        return this.params;\n    }\n\n    isValid(): boolean {\n        return this.valididity;\n    }\n\n}\n\nexport const lambdaHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n\n    let body = ''\n    let statusCode = 200\n    const headers = { 'Content-Type': 'application/json' }\n\n    let validator: Validator = new Validator(event.body);\n\n    // validate the form\n    try {\n        validator.validate();\n    } catch (error: any) {\n        statusCode = 500;\n        body = error.message;\n    }\n\n    if (validator.isValid()) {\n        // fetch the parameters if the validator succeeds\n        const params = validator.getParameters();\n\n        // Hash entered password\n        const password_hash = crypto\n            .createHash('md5')\n            .update(params.password)\n            .digest('base64');\n\n        let hasAccount: boolean = false;\n\n        const dynamo = DynamoDBDocumentClient.from(new DynamoDBClient({ region: \"us-east-2\" }));\n\n        try {\n\n\n            /// Query database for user with entered username and hashed password, whom should have a positive status\n            const users = await dynamo.send(new ScanCommand({\n                TableName: process.env.TABLE_NAME,\n                ProjectionExpression: 'auth_id, username',\n                FilterExpression:\n                    'username = :username AND passwordHash = :password AND isActive = :isActive',\n                ExpressionAttributeValues: {\n                    ':username': params.username,\n                    ':password': password_hash,\n                    ':isActive': true\n                }\n            }));\n\n            hasAccount = users.Items.length > 0;\n\n        } catch (err: any) {\n            hasAccount = false;\n            statusCode = 400\n            body = err.message\n            console.log(err.message);\n        }\n\n        if (hasAccount) {\n            statusCode = 500;\n            body = `Oops!! User already has an account!`;\n        }\n\n        try {\n            if (!hasAccount) {\n\n                const item = {\n                    auth_id: crypto.randomUUID(),\n                    username: params.username,\n                    passwordHash: password_hash,\n                    isActive: true,\n                    createdAt: (new Date()).toISOString(),\n                    updatedAt: (new Date()).toISOString()\n                };\n\n                await dynamo.send(new PutCommand({\n                    TableName: process.env.TABLE_NAME,\n                    Item: item\n                }));\n\n                statusCode = 200;\n                body = `Welcome ${item.username}, Account Successfuly Created!`;\n\n                // TODO:\n                // 2. notify user\n            }\n        } catch (e: any) {\n            statusCode = 500;\n            body = `${e.message}`;\n        }\n    }\n\n\n    const response = {\n        statusCode: statusCode,\n        body: body,\n        headers: headers\n    }\n\n    return response\n};\n"],
  "mappings": "uwBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAA+B,oCAC/BC,EAAgE,iCAChEC,EAAwB,qBAGxB,IAAMC,EAAN,KAAgB,CAMZ,YAAYC,EAAY,CAJxB,KAAQ,KAAY,CAAC,EAErB,KAAQ,OAAc,CAAC,EAGnB,KAAK,KAAOA,EACZ,KAAK,WAAa,EACtB,CAEA,UAAiB,CAEb,GAAI,CAAC,KAAK,KAEN,WAAK,WAAa,GACZ,MAAM,oBAAoB,EAKpC,GAFA,KAAK,OAAS,KAAK,MAAM,KAAK,IAAI,EAE9B,CAAC,KAAK,OAAO,SAEb,WAAK,WAAa,GACZ,MAAM,oBAAoB,EAGpC,GAAI,CAAC,KAAK,OAAO,SACb,WAAK,WAAa,GACZ,MAAM,oBAAoB,EAGpC,GAAI,KAAK,OAAO,SAAS,OAAS,GAC9B,WAAK,WAAa,GACZ,MAAM,4CAA4C,EAG5D,GAAI,KAAK,OAAO,SAAS,OAAS,GAC9B,WAAK,WAAa,GACZ,MAAM,4CAA4C,EAG5D,GAAI,CAAC,KAAK,OAAO,SAAS,SAAS,GAAG,EAClC,WAAK,WAAa,GACZ,MAAM,oCAAoC,EAGpD,KAAK,WAAa,EACtB,CAEA,eAAqB,CACjB,OAAO,KAAK,MAChB,CAEA,SAAmB,CACf,OAAO,KAAK,UAChB,CAEJ,EAEaC,EAAuBC,GAAgEC,EAAA,wBAEhG,IAAIC,EAAO,GACPC,EAAa,IACXC,EAAU,CAAE,eAAgB,kBAAmB,EAEjDC,EAAuB,IAAIR,EAAUG,EAAM,IAAI,EAGnD,GAAI,CACAK,EAAU,SAAS,CACvB,OAASC,EAAP,CACEH,EAAa,IACbD,EAAOI,EAAM,OACjB,CAEA,GAAID,EAAU,QAAQ,EAAG,CAErB,IAAME,EAASF,EAAU,cAAc,EAGjCG,EACD,aAAW,KAAK,EAChB,OAAOD,EAAO,QAAQ,EACtB,OAAO,QAAQ,EAEhBE,EAAsB,GAEpBC,EAAS,yBAAuB,KAAK,IAAI,iBAAe,CAAE,OAAQ,WAAY,CAAC,CAAC,EAEtF,GAAI,CAgBAD,GAZc,MAAMC,EAAO,KAAK,IAAI,cAAY,CAC5C,UAAW,QAAQ,IAAI,WACvB,qBAAsB,oBACtB,iBACI,6EACJ,0BAA2B,CACvB,YAAaH,EAAO,SACpB,YAAaC,EACb,YAAa,EACjB,CACJ,CAAC,CAAC,GAEiB,MAAM,OAAS,CAEtC,OAASG,EAAP,CACEF,EAAa,GACbN,EAAa,IACbD,EAAOS,EAAI,QACX,QAAQ,IAAIA,EAAI,OAAO,CAC3B,CAEIF,IACAN,EAAa,IACbD,EAAO,uCAGX,GAAI,CACA,GAAI,CAACO,EAAY,CAEb,IAAMG,EAAO,CACT,QAAgB,aAAW,EAC3B,SAAUL,EAAO,SACjB,aAAcC,EACd,SAAU,GACV,UAAY,IAAI,KAAK,EAAG,YAAY,EACpC,UAAY,IAAI,KAAK,EAAG,YAAY,CACxC,EAEA,MAAME,EAAO,KAAK,IAAI,aAAW,CAC7B,UAAW,QAAQ,IAAI,WACvB,KAAME,CACV,CAAC,CAAC,EAEFT,EAAa,IACbD,EAAO,WAAWU,EAAK,wCAI3B,CACJ,OAASC,EAAP,CACEV,EAAa,IACbD,EAAO,GAAGW,EAAE,SAChB,CACJ,CASA,MANiB,CACb,WAAYV,EACZ,KAAMD,EACN,QAASE,CACb,CAGJ",
  "names": ["app_exports", "__export", "lambdaHandler", "__toCommonJS", "import_client_dynamodb", "import_lib_dynamodb", "crypto", "Validator", "_body", "lambdaHandler", "event", "__async", "body", "statusCode", "headers", "validator", "error", "params", "password_hash", "hasAccount", "dynamo", "err", "item", "e"]
}
