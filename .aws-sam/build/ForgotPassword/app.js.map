{
  "version": 3,
  "sources": ["../../../../../../../../../../private/var/folders/wp/3087_ybx3m11q540r3cpqq940000gn/T/tmpsll5ivti/app.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\"\nimport { DynamoDBDocumentClient, ScanCommand } from \"@aws-sdk/lib-dynamodb\"\n\n\nclass Validator {\n\n    private body: any = {};\n    private valididity: boolean;\n    private params: any = {};\n\n    constructor(_body: any) {\n        this.body = _body;\n        this.valididity = false;\n    }\n\n    validate(): void {\n\n        if (!this.body) {\n\n            this.valididity = false;\n            throw Error('Username Required!')\n        }\n\n        this.params = JSON.parse(this.body);\n\n        if (!this.params.username) {\n\n            this.valididity = false;\n            throw Error('Username Required!')\n        }\n\n        if (this.params.username.length < 10) {\n            this.valididity = false;\n            throw Error('Username length must be min 10 chars long!')\n        }\n\n        if (!this.params.username.includes('@')) {\n            this.valididity = false;\n            throw Error('Username must be an email address!')\n        }\n\n        this.valididity = true;\n    }\n\n    getParameters(): any {\n        return this.params;\n    }\n\n    isValid(): boolean {\n        return this.valididity;\n    }\n\n}\n\n/**\n *\n * Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format\n * @param {Object} event - API Gateway Lambda Proxy Input Format\n *\n * Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html\n * @returns {Object} object - API Gateway Lambda Proxy Output Format\n *\n */\n\nexport const lambdaHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n    let body = '';\n    let statusCode = 200;\n    const headers = { 'Content-Type': 'application/json' };\n\n    try {\n        // validate input\n        // required parts are\n        // 1. username - which must also be a valid email address\n\n        let validator: Validator = new Validator(event.body);\n\n        // validate the form\n        validator.validate();\n\n        if (validator.isValid()) {\n            // fetch the parameters if the validator succeeds\n            const params = validator.getParameters();\n\n            /// Query database for user with entered username, whom should have a positive status\n            const command = new ScanCommand({\n                ProjectionExpression: 'auth_id, username',\n                TableName: process.env.TABLE_NAME,\n                FilterExpression: 'username = :username AND isActive = :isActive',\n                ExpressionAttributeValues: {\n                    ':username': params.username,\n                    ':isActive': true\n                },\n                ConsistentRead: true\n            })\n\n            const dynamo = DynamoDBDocumentClient.from(new DynamoDBClient({}));\n            const users = await dynamo.send(command)\n\n            if (users.Items.length === 0) {\n                throw Error('Invalid user')\n            } else {\n                // TODO: revisit the forgotpassword chatter.\n\n                statusCode = 200\n                body = `Welcome! ${params.username}`\n            }\n        }\n\n    } catch (err: any) {\n        statusCode = 400\n        body = err.message\n    }\n\n    const response = {\n        statusCode: statusCode,\n        body: body,\n        headers: headers\n    }\n\n    return response\n};\n"],
  "mappings": "snBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,IAAA,eAAAC,EAAAH,GACA,IAAAI,EAA+B,oCAC/BC,EAAoD,iCAGpD,IAAMC,EAAN,KAAgB,CAMZ,YAAYC,EAAY,CAJxB,KAAQ,KAAY,CAAC,EAErB,KAAQ,OAAc,CAAC,EAGnB,KAAK,KAAOA,EACZ,KAAK,WAAa,EACtB,CAEA,UAAiB,CAEb,GAAI,CAAC,KAAK,KAEN,WAAK,WAAa,GACZ,MAAM,oBAAoB,EAKpC,GAFA,KAAK,OAAS,KAAK,MAAM,KAAK,IAAI,EAE9B,CAAC,KAAK,OAAO,SAEb,WAAK,WAAa,GACZ,MAAM,oBAAoB,EAGpC,GAAI,KAAK,OAAO,SAAS,OAAS,GAC9B,WAAK,WAAa,GACZ,MAAM,4CAA4C,EAG5D,GAAI,CAAC,KAAK,OAAO,SAAS,SAAS,GAAG,EAClC,WAAK,WAAa,GACZ,MAAM,oCAAoC,EAGpD,KAAK,WAAa,EACtB,CAEA,eAAqB,CACjB,OAAO,KAAK,MAChB,CAEA,SAAmB,CACf,OAAO,KAAK,UAChB,CAEJ,EAYaC,EAAuBC,GAAgEC,EAAA,wBAChG,IAAIC,EAAO,GACPC,EAAa,IACXC,EAAU,CAAE,eAAgB,kBAAmB,EAErD,GAAI,CAKA,IAAIC,EAAuB,IAAIR,EAAUG,EAAM,IAAI,EAKnD,GAFAK,EAAU,SAAS,EAEfA,EAAU,QAAQ,EAAG,CAErB,IAAMC,EAASD,EAAU,cAAc,EAGjCE,EAAU,IAAI,cAAY,CAC5B,qBAAsB,oBACtB,UAAW,QAAQ,IAAI,WACvB,iBAAkB,gDAClB,0BAA2B,CACvB,YAAaD,EAAO,SACpB,YAAa,EACjB,EACA,eAAgB,EACpB,CAAC,EAKD,IAFc,MADC,yBAAuB,KAAK,IAAI,iBAAe,CAAC,CAAC,CAAC,EACtC,KAAKC,CAAO,GAE7B,MAAM,SAAW,EACvB,MAAM,MAAM,cAAc,EAI1BJ,EAAa,IACbD,EAAO,YAAYI,EAAO,UAElC,CAEJ,OAASE,EAAP,CACEL,EAAa,IACbD,EAAOM,EAAI,OACf,CAQA,MANiB,CACb,WAAYL,EACZ,KAAMD,EACN,QAASE,CACb,CAGJ",
  "names": ["app_exports", "__export", "lambdaHandler", "__toCommonJS", "import_client_dynamodb", "import_lib_dynamodb", "Validator", "_body", "lambdaHandler", "event", "__async", "body", "statusCode", "headers", "validator", "params", "command", "err"]
}
