"use strict";var f=Object.create;var c=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var P=(s,e)=>{for(var a in e)c(s,a,{get:e[a],enumerable:!0})},p=(s,e,a,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of b(e))!E.call(s,t)&&t!==a&&c(s,t,{get:()=>e[t],enumerable:!(n=A(e,t))||n.enumerable});return s};var D=(s,e,a)=>(a=s!=null?f(g(s)):{},p(e||!s||!s.__esModule?c(a,"default",{value:s,enumerable:!0}):a,s)),I=s=>p(c({},"__esModule",{value:!0}),s);var w=(s,e,a)=>new Promise((n,t)=>{var y=r=>{try{d(a.next(r))}catch(m){t(m)}},o=r=>{try{d(a.throw(r))}catch(m){t(m)}},d=r=>r.done?n(r.value):Promise.resolve(r.value).then(y,o);d((a=a.apply(s,e)).next())});var C={};P(C,{lambdaHandler:()=>x});module.exports=I(C);var v=require("@aws-sdk/client-dynamodb"),l=require("@aws-sdk/lib-dynamodb"),h=D(require("crypto"));var u=class{constructor(e){this.body={};this.params={};this.body=e,this.valididity=!1}validate(){if(!this.body)throw this.valididity=!1,Error("Username Required!");if(this.params=JSON.parse(this.body),!this.params.username)throw this.valididity=!1,Error("Username Required!");if(!this.params.password)throw this.valididity=!1,Error("Password Required!");if(this.params.username.length<10)throw this.valididity=!1,Error("Username length must be min 10 chars long!");if(this.params.password.length<10)throw this.valididity=!1,Error("Password length must be min 10 chars long!");if(!this.params.username.includes("@"))throw this.valididity=!1,Error("Username must be an email address!");this.valididity=!0}getParameters(){return this.params}isValid(){return this.valididity}},x=s=>w(void 0,null,function*(){let e="",a=200,n={"Content-Type":"application/json"},t=new u(s.body);try{t.validate()}catch(o){a=500,e=o.message}if(t.isValid()){let o=t.getParameters(),d=h.createHash("md5").update(o.password).digest("base64"),r=!1,m=l.DynamoDBDocumentClient.from(new v.DynamoDBClient({region:"us-east-2"}));try{r=(yield m.send(new l.ScanCommand({TableName:process.env.TABLE_NAME,ProjectionExpression:"auth_id, username",FilterExpression:"username = :username AND passwordHash = :password AND isActive = :isActive",ExpressionAttributeValues:{":username":o.username,":password":d,":isActive":!0}}))).Items.length>0}catch(i){r=!1,a=400,e=i.message,console.log(i.message)}r&&(a=500,e="Oops!! User already has an account!");try{if(!r){let i={auth_id:h.randomUUID(),username:o.username,passwordHash:d,isActive:!0,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};yield m.send(new l.PutCommand({TableName:process.env.TABLE_NAME,Item:i})),a=200,e=`Welcome ${i.username}, Account Successfuly Created!`}}catch(i){a=500,e=`${i.message}`}}return{statusCode:a,body:e,headers:n}});0&&(module.exports={lambdaHandler});
//# sourceMappingURL=app.js.map
